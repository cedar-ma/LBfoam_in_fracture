import requests # library for file downloadimport osimport numpy as npimport skimage.transformimport globimport skimage.transform as skitfrom scipy.ndimage import distance_transform_edt as edistimport matplotlib.pyplot as pltimport pyvista as pv# width  = 400# height = 120# slices = 13# width  = 1280# height = 220# slices = 10width  = 1280height = 280slices = 50# print(os.getcwd())filename = ["../LBfoam_in_fracture_local/input/gumbo_fracture_3Dhorrizontal.raw","../LBfoam_in_fracture_local/input/smooth_fracture_horizontal550.raw"]#"./input/h13_1constriction_channel.raw"#"../LBfoam_in_fracture_local/input/h10_smooth_channel_edge.raw"alldata = np.fromfile(filename[1], dtype=np.ubyte, sep="")image = alldata.reshape([1280, 550, 50])# image = image.swapaxes(0,2)image = image.transpose([2,1,0]) # equivalent to swapaxes(0,2)# image_rescaled  = skimage.transform.rescale(image.astype(float), 0.5, preserve_range=True)pv_img = pv.wrap(image)def initialize_plotter():        # Initialize a PyVista Plotter Object    plotter_obj = pv.Plotter()        # Set the background color to white    plotter_obj.set_background(color='w')    pv.global_theme.font.color = 'black'        return plotter_obj# Wrap 3D NumPy array to PyVista data objectp = initialize_plotter()# Generate a contoured surface for rough fracture. c = image.reshape(1,-1) # this and the next line to plot solid space#*255,scalars=c.astype(np.uint8), cmap='summer_r'p.add_volume(image*80, cmap='Oranges')contour = pv_img.contour(isosurfaces=[0.5])p.add_mesh(contour, color=(0.78, 0.5, 0.13), opacity=1.)# sim_folder = '/Users/cedar/Library/CloudStorage/Box-Box/Research_Cedar/LBFOAM/Qingdao_meeting/results/3D/1con_5k/ca-1/tau95_force1e4/sigma2e3'sim_folder = '/Users/cedar/Library/CloudStorage/Box-Box/Research_Cedar/LBFOAM//Wyoming wetting meeting 2023/results/3DMotion'foam_files_regex = fr'{sim_folder}/rough/strong_restart4000/volumeData*.vti'foam_files = glob.glob(foam_files_regex)# Sort lists for correct orderfoam_list = sorted(foam_files)print(len(foam_list))skip = 30x, y, z = np.meshgrid(np.arange(0, height,1),np.arange(0, slices, 1),np.arange(0,width, 1))camera_pos = [(-2110.4693736076388, -73.5302461510084, 555.0747693040886), (639.5, 274.4999877810478, 639.5), (-0.12184359965192733, 0.9873536698511682, -0.10142419758268395)]# [(-403.1136285139938, -63.38256140351788, -139.76126595783154),#  (639.5, 274.4999877810478, 639.5),#  (-0.2863843498097172, 0.9575792252836772, -0.03203172629094983)]#h13_1constriction_channel#[(-1630.2298790122663, -906.8944595491763, 664.8191203715008), # (639.5, 274.4999877810478, 639.5), # (-0.4566842750734708, 0.8738165517828227, -0.16698534885131702)]#h10_smooth_channel_edgefor i in range(-1, len(foam_list), skip):    # plt.close()    # ax = plt.figure().add_subplot(projection='3d')    foam_mesh = pv.read(foam_list[i])    print(foam_list[i])    u = foam_mesh.get_array('velocity')[:,0].reshape([slices, height, width ])    v = foam_mesh.get_array('velocity')[:,1].reshape([slices, height, width])    w = foam_mesh.get_array('velocity')[:,2].reshape([slices, height, width])    # ax.quiver(x, y, z, u, v, w, length=1.5, normalize=True)    # plt.show()             cent = np.stack((y,x,z), axis=3)    dire = np.stack((u,v,w), axis=3)    print(cent.shape)    print(dire.shape)    # print(foam_mesh.array_names)    # ['velocity', 'pressure', 'adDensity', 'volumeFraction', 'smoothedVolumeFraction', 'bubbleTags', 'disjoiningPressure']    foam_vof = foam_mesh.get_array('volumeFraction').reshape([slices, height, width])    foam_data = pv.wrap(foam_vof)    foam_surface = foam_data.contour(isosurfaces=[0.1])    p.add_mesh(foam_surface,  color='#A8E4EA', opacity = 0.5) #color=(0.98,0.83,0.28)    _ = p.add_arrows(cent[25,:,:], dire[25,:,:], mag=1, cmap='Oranges')    p.remove_scalar_bar('values')    # p.remove_scalar_bar('magnitude')    cpos = p.show(cpos= camera_pos, return_cpos=True, auto_close=False)    # p.screenshot(filename=f'{sim_folder}/figures/rough/3_smooth_vector{i}.png',return_img=True)    # print(cpos)    # p.show()# p.show_axes()